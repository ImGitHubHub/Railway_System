package com.haichaoaixuexi.railway_system_android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haichaoaixuexi.railway_system_android.entity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Void> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TASK_ID = new Property(0, int.class, "TASK_ID", false, "TASK__ID");
        public final static Property SBBH = new Property(1, int.class, "SBBH", false, "SBBH");
        public final static Property TASK_USER = new Property(2, int.class, "TASK_USER", false, "TASK__USER");
        public final static Property ABC = new Property(3, String.class, "ABC", false, "ABC");
        public final static Property TASK_PROCESS = new Property(4, String.class, "TASK_PROCESS", false, "TASK__PROCESS");
        public final static Property TIME = new Property(5, String.class, "TIME", false, "TIME");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"TASK__ID\" INTEGER NOT NULL ," + // 0: TASK_ID
                "\"SBBH\" INTEGER NOT NULL ," + // 1: SBBH
                "\"TASK__USER\" INTEGER NOT NULL ," + // 2: TASK_USER
                "\"ABC\" TEXT," + // 3: ABC
                "\"TASK__PROCESS\" TEXT," + // 4: TASK_PROCESS
                "\"TIME\" TEXT);"); // 5: TIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTASK_ID());
        stmt.bindLong(2, entity.getSBBH());
        stmt.bindLong(3, entity.getTASK_USER());
 
        String ABC = entity.getABC();
        if (ABC != null) {
            stmt.bindString(4, ABC);
        }
 
        String TASK_PROCESS = entity.getTASK_PROCESS();
        if (TASK_PROCESS != null) {
            stmt.bindString(5, TASK_PROCESS);
        }
 
        String TIME = entity.getTIME();
        if (TIME != null) {
            stmt.bindString(6, TIME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTASK_ID());
        stmt.bindLong(2, entity.getSBBH());
        stmt.bindLong(3, entity.getTASK_USER());
 
        String ABC = entity.getABC();
        if (ABC != null) {
            stmt.bindString(4, ABC);
        }
 
        String TASK_PROCESS = entity.getTASK_PROCESS();
        if (TASK_PROCESS != null) {
            stmt.bindString(5, TASK_PROCESS);
        }
 
        String TIME = entity.getTIME();
        if (TIME != null) {
            stmt.bindString(6, TIME);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.getInt(offset + 0), // TASK_ID
            cursor.getInt(offset + 1), // SBBH
            cursor.getInt(offset + 2), // TASK_USER
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ABC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TASK_PROCESS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // TIME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setTASK_ID(cursor.getInt(offset + 0));
        entity.setSBBH(cursor.getInt(offset + 1));
        entity.setTASK_USER(cursor.getInt(offset + 2));
        entity.setABC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTASK_PROCESS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTIME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Task entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Task entity) {
        return null;
    }

    @Override
    public boolean hasKey(Task entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
