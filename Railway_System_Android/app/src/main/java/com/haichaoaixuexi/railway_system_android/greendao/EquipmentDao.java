package com.haichaoaixuexi.railway_system_android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haichaoaixuexi.railway_system_android.entity.Equipment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIPMENT".
*/
public class EquipmentDao extends AbstractDao<Equipment, Void> {

    public static final String TABLENAME = "EQUIPMENT";

    /**
     * Properties of entity Equipment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EQUIP_ID = new Property(0, int.class, "EQUIP_ID", false, "EQUIP__ID");
        public final static Property SSQY = new Property(1, String.class, "SSQY", false, "SSQY");
        public final static Property SBMC = new Property(2, String.class, "SBMC", false, "SBMC");
        public final static Property SBGG = new Property(3, String.class, "SBGG", false, "SBGG");
        public final static Property ZZCJ = new Property(4, String.class, "ZZCJ", false, "ZZCJ");
        public final static Property ZZRQ = new Property(5, String.class, "ZZRQ", false, "ZZRQ");
        public final static Property SBZT = new Property(6, int.class, "SBZT", false, "SBZT");
        public final static Property SSCJ = new Property(7, int.class, "SSCJ", false, "SSCJ");
        public final static Property GZLX = new Property(8, String.class, "GZLX", false, "GZLX");
        public final static Property XXZQ = new Property(9, int.class, "XXZQ", false, "XXZQ");
        public final static Property GROUP_ID = new Property(10, int.class, "GROUP_ID", false, "GROUP__ID");
        public final static Property USER_ID = new Property(11, int.class, "USER_ID", false, "USER__ID");
        public final static Property GROUP_NAME = new Property(12, String.class, "GROUP_NAME", false, "GROUP__NAME");
        public final static Property EQ_STATUS_ID = new Property(13, int.class, "EQ_STATUS_ID", false, "EQ__STATUS__ID");
        public final static Property CONTENT = new Property(14, String.class, "CONTENT", false, "CONTENT");
        public final static Property CQLX = new Property(15, String.class, "CQLX", false, "CQLX");
        public final static Property SYRQ = new Property(16, String.class, "SYRQ", false, "SYRQ");
        public final static Property WXCC = new Property(17, String.class, "WXCC", false, "WXCC");
        public final static Property CCBH = new Property(18, String.class, "CCBH", false, "CCBH");
        public final static Property LYFS = new Property(19, String.class, "LYFS", false, "LYFS");
        public final static Property BZ = new Property(20, String.class, "BZ", false, "BZ");
        public final static Property SBLX = new Property(21, String.class, "SBLX", false, "SBLX");
        public final static Property CJDH = new Property(22, String.class, "CJDH", false, "CJDH");
    }


    public EquipmentDao(DaoConfig config) {
        super(config);
    }
    
    public EquipmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIPMENT\" (" + //
                "\"EQUIP__ID\" INTEGER NOT NULL ," + // 0: EQUIP_ID
                "\"SSQY\" TEXT," + // 1: SSQY
                "\"SBMC\" TEXT," + // 2: SBMC
                "\"SBGG\" TEXT," + // 3: SBGG
                "\"ZZCJ\" TEXT," + // 4: ZZCJ
                "\"ZZRQ\" TEXT," + // 5: ZZRQ
                "\"SBZT\" INTEGER NOT NULL ," + // 6: SBZT
                "\"SSCJ\" INTEGER NOT NULL ," + // 7: SSCJ
                "\"GZLX\" TEXT," + // 8: GZLX
                "\"XXZQ\" INTEGER NOT NULL ," + // 9: XXZQ
                "\"GROUP__ID\" INTEGER NOT NULL ," + // 10: GROUP_ID
                "\"USER__ID\" INTEGER NOT NULL ," + // 11: USER_ID
                "\"GROUP__NAME\" TEXT," + // 12: GROUP_NAME
                "\"EQ__STATUS__ID\" INTEGER NOT NULL ," + // 13: EQ_STATUS_ID
                "\"CONTENT\" TEXT," + // 14: CONTENT
                "\"CQLX\" TEXT," + // 15: CQLX
                "\"SYRQ\" TEXT," + // 16: SYRQ
                "\"WXCC\" TEXT," + // 17: WXCC
                "\"CCBH\" TEXT," + // 18: CCBH
                "\"LYFS\" TEXT," + // 19: LYFS
                "\"BZ\" TEXT," + // 20: BZ
                "\"SBLX\" TEXT," + // 21: SBLX
                "\"CJDH\" TEXT);"); // 22: CJDH
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIPMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Equipment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEQUIP_ID());
 
        String SSQY = entity.getSSQY();
        if (SSQY != null) {
            stmt.bindString(2, SSQY);
        }
 
        String SBMC = entity.getSBMC();
        if (SBMC != null) {
            stmt.bindString(3, SBMC);
        }
 
        String SBGG = entity.getSBGG();
        if (SBGG != null) {
            stmt.bindString(4, SBGG);
        }
 
        String ZZCJ = entity.getZZCJ();
        if (ZZCJ != null) {
            stmt.bindString(5, ZZCJ);
        }
 
        String ZZRQ = entity.getZZRQ();
        if (ZZRQ != null) {
            stmt.bindString(6, ZZRQ);
        }
        stmt.bindLong(7, entity.getSBZT());
        stmt.bindLong(8, entity.getSSCJ());
 
        String GZLX = entity.getGZLX();
        if (GZLX != null) {
            stmt.bindString(9, GZLX);
        }
        stmt.bindLong(10, entity.getXXZQ());
        stmt.bindLong(11, entity.getGROUP_ID());
        stmt.bindLong(12, entity.getUSER_ID());
 
        String GROUP_NAME = entity.getGROUP_NAME();
        if (GROUP_NAME != null) {
            stmt.bindString(13, GROUP_NAME);
        }
        stmt.bindLong(14, entity.getEQ_STATUS_ID());
 
        String CONTENT = entity.getCONTENT();
        if (CONTENT != null) {
            stmt.bindString(15, CONTENT);
        }
 
        String CQLX = entity.getCQLX();
        if (CQLX != null) {
            stmt.bindString(16, CQLX);
        }
 
        String SYRQ = entity.getSYRQ();
        if (SYRQ != null) {
            stmt.bindString(17, SYRQ);
        }
 
        String WXCC = entity.getWXCC();
        if (WXCC != null) {
            stmt.bindString(18, WXCC);
        }
 
        String CCBH = entity.getCCBH();
        if (CCBH != null) {
            stmt.bindString(19, CCBH);
        }
 
        String LYFS = entity.getLYFS();
        if (LYFS != null) {
            stmt.bindString(20, LYFS);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(21, BZ);
        }
 
        String SBLX = entity.getSBLX();
        if (SBLX != null) {
            stmt.bindString(22, SBLX);
        }
 
        String CJDH = entity.getCJDH();
        if (CJDH != null) {
            stmt.bindString(23, CJDH);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Equipment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEQUIP_ID());
 
        String SSQY = entity.getSSQY();
        if (SSQY != null) {
            stmt.bindString(2, SSQY);
        }
 
        String SBMC = entity.getSBMC();
        if (SBMC != null) {
            stmt.bindString(3, SBMC);
        }
 
        String SBGG = entity.getSBGG();
        if (SBGG != null) {
            stmt.bindString(4, SBGG);
        }
 
        String ZZCJ = entity.getZZCJ();
        if (ZZCJ != null) {
            stmt.bindString(5, ZZCJ);
        }
 
        String ZZRQ = entity.getZZRQ();
        if (ZZRQ != null) {
            stmt.bindString(6, ZZRQ);
        }
        stmt.bindLong(7, entity.getSBZT());
        stmt.bindLong(8, entity.getSSCJ());
 
        String GZLX = entity.getGZLX();
        if (GZLX != null) {
            stmt.bindString(9, GZLX);
        }
        stmt.bindLong(10, entity.getXXZQ());
        stmt.bindLong(11, entity.getGROUP_ID());
        stmt.bindLong(12, entity.getUSER_ID());
 
        String GROUP_NAME = entity.getGROUP_NAME();
        if (GROUP_NAME != null) {
            stmt.bindString(13, GROUP_NAME);
        }
        stmt.bindLong(14, entity.getEQ_STATUS_ID());
 
        String CONTENT = entity.getCONTENT();
        if (CONTENT != null) {
            stmt.bindString(15, CONTENT);
        }
 
        String CQLX = entity.getCQLX();
        if (CQLX != null) {
            stmt.bindString(16, CQLX);
        }
 
        String SYRQ = entity.getSYRQ();
        if (SYRQ != null) {
            stmt.bindString(17, SYRQ);
        }
 
        String WXCC = entity.getWXCC();
        if (WXCC != null) {
            stmt.bindString(18, WXCC);
        }
 
        String CCBH = entity.getCCBH();
        if (CCBH != null) {
            stmt.bindString(19, CCBH);
        }
 
        String LYFS = entity.getLYFS();
        if (LYFS != null) {
            stmt.bindString(20, LYFS);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(21, BZ);
        }
 
        String SBLX = entity.getSBLX();
        if (SBLX != null) {
            stmt.bindString(22, SBLX);
        }
 
        String CJDH = entity.getCJDH();
        if (CJDH != null) {
            stmt.bindString(23, CJDH);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Equipment readEntity(Cursor cursor, int offset) {
        Equipment entity = new Equipment( //
            cursor.getInt(offset + 0), // EQUIP_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SSQY
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SBMC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SBGG
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ZZCJ
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ZZRQ
            cursor.getInt(offset + 6), // SBZT
            cursor.getInt(offset + 7), // SSCJ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // GZLX
            cursor.getInt(offset + 9), // XXZQ
            cursor.getInt(offset + 10), // GROUP_ID
            cursor.getInt(offset + 11), // USER_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // GROUP_NAME
            cursor.getInt(offset + 13), // EQ_STATUS_ID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // CONTENT
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CQLX
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SYRQ
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // WXCC
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // CCBH
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // LYFS
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // BZ
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // SBLX
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // CJDH
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Equipment entity, int offset) {
        entity.setEQUIP_ID(cursor.getInt(offset + 0));
        entity.setSSQY(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSBMC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSBGG(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZZCJ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZZRQ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSBZT(cursor.getInt(offset + 6));
        entity.setSSCJ(cursor.getInt(offset + 7));
        entity.setGZLX(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXXZQ(cursor.getInt(offset + 9));
        entity.setGROUP_ID(cursor.getInt(offset + 10));
        entity.setUSER_ID(cursor.getInt(offset + 11));
        entity.setGROUP_NAME(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEQ_STATUS_ID(cursor.getInt(offset + 13));
        entity.setCONTENT(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCQLX(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSYRQ(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWXCC(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCCBH(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLYFS(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBZ(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSBLX(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCJDH(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Equipment entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Equipment entity) {
        return null;
    }

    @Override
    public boolean hasKey(Equipment entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
