package com.haichaoaixuexi.railway_system_android.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haichaoaixuexi.railway_system_android.entity.Eq_issue_kind;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQ_ISSUE_KIND".
*/
public class Eq_issue_kindDao extends AbstractDao<Eq_issue_kind, Void> {

    public static final String TABLENAME = "EQ_ISSUE_KIND";

    /**
     * Properties of entity Eq_issue_kind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EQ_ISSUE_KIND = new Property(0, int.class, "EQ_ISSUE_KIND", false, "EQ__ISSUE__KIND");
        public final static Property EQ_ISSUE = new Property(1, String.class, "EQ_ISSUE", false, "EQ__ISSUE");
    }


    public Eq_issue_kindDao(DaoConfig config) {
        super(config);
    }
    
    public Eq_issue_kindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQ_ISSUE_KIND\" (" + //
                "\"EQ__ISSUE__KIND\" INTEGER NOT NULL ," + // 0: EQ_ISSUE_KIND
                "\"EQ__ISSUE\" TEXT);"); // 1: EQ_ISSUE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQ_ISSUE_KIND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Eq_issue_kind entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEQ_ISSUE_KIND());
 
        String EQ_ISSUE = entity.getEQ_ISSUE();
        if (EQ_ISSUE != null) {
            stmt.bindString(2, EQ_ISSUE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Eq_issue_kind entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getEQ_ISSUE_KIND());
 
        String EQ_ISSUE = entity.getEQ_ISSUE();
        if (EQ_ISSUE != null) {
            stmt.bindString(2, EQ_ISSUE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Eq_issue_kind readEntity(Cursor cursor, int offset) {
        Eq_issue_kind entity = new Eq_issue_kind( //
            cursor.getInt(offset + 0), // EQ_ISSUE_KIND
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // EQ_ISSUE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Eq_issue_kind entity, int offset) {
        entity.setEQ_ISSUE_KIND(cursor.getInt(offset + 0));
        entity.setEQ_ISSUE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Eq_issue_kind entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Eq_issue_kind entity) {
        return null;
    }

    @Override
    public boolean hasKey(Eq_issue_kind entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
